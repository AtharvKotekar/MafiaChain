/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SimpleMafiaEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DISPUTE_WINDOW"
      | "ENTRY_FEE"
      | "MAX_PLAYERS"
      | "createGame"
      | "emergencyRefund"
      | "finalizeGame"
      | "games"
      | "getGameInfo"
      | "getTotalBalance"
      | "isPlayerInGame"
      | "joinGame"
      | "owner"
      | "playerGameCounts"
      | "renounceOwnership"
      | "startGame"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyRefund"
      | "GameCreated"
      | "GameFinalized"
      | "GameStarted"
      | "OwnershipTransferred"
      | "PlayerJoined"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DISPUTE_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ENTRY_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "createGame", values: [string]): string;
  encodeFunctionData(
    functionFragment: "emergencyRefund",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeGame",
    values: [string, AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "games", values: [string]): string;
  encodeFunctionData(functionFragment: "getGameInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerInGame",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "joinGame", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerGameCounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startGame", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DISPUTE_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ENTRY_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PLAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerInGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerGameCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace EmergencyRefundEvent {
  export type InputTuple = [
    gameId: string,
    player: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [gameId: string, player: string, amount: bigint];
  export interface OutputObject {
    gameId: string;
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCreatedEvent {
  export type InputTuple = [gameId: string, creator: AddressLike];
  export type OutputTuple = [gameId: string, creator: string];
  export interface OutputObject {
    gameId: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameFinalizedEvent {
  export type InputTuple = [
    gameId: string,
    winners: AddressLike[],
    totalPayout: BigNumberish
  ];
  export type OutputTuple = [
    gameId: string,
    winners: string[],
    totalPayout: bigint
  ];
  export interface OutputObject {
    gameId: string;
    winners: string[];
    totalPayout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [gameId: string, startTime: BigNumberish];
  export type OutputTuple = [gameId: string, startTime: bigint];
  export interface OutputObject {
    gameId: string;
    startTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [
    gameId: string,
    player: AddressLike,
    playerCount: BigNumberish
  ];
  export type OutputTuple = [
    gameId: string,
    player: string,
    playerCount: bigint
  ];
  export interface OutputObject {
    gameId: string;
    player: string;
    playerCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleMafiaEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleMafiaEscrow;
  waitForDeployment(): Promise<this>;

  interface: SimpleMafiaEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DISPUTE_WINDOW: TypedContractMethod<[], [bigint], "view">;

  ENTRY_FEE: TypedContractMethod<[], [bigint], "view">;

  MAX_PLAYERS: TypedContractMethod<[], [bigint], "view">;

  createGame: TypedContractMethod<[gameId: string], [void], "nonpayable">;

  emergencyRefund: TypedContractMethod<[gameId: string], [void], "nonpayable">;

  finalizeGame: TypedContractMethod<
    [gameId: string, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;

  games: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, boolean, bigint, boolean] & {
        gameId: string;
        balance: bigint;
        started: boolean;
        startTime: bigint;
        finalized: boolean;
      }
    ],
    "view"
  >;

  getGameInfo: TypedContractMethod<
    [gameId: string],
    [
      [string[], bigint, boolean, bigint, boolean, string[]] & {
        players: string[];
        balance: bigint;
        started: boolean;
        startTime: bigint;
        finalized: boolean;
        winners: string[];
      }
    ],
    "view"
  >;

  getTotalBalance: TypedContractMethod<[], [bigint], "view">;

  isPlayerInGame: TypedContractMethod<
    [gameId: string, player: AddressLike],
    [boolean],
    "view"
  >;

  joinGame: TypedContractMethod<[gameId: string], [void], "payable">;

  owner: TypedContractMethod<[], [string], "view">;

  playerGameCounts: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  startGame: TypedContractMethod<[gameId: string], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DISPUTE_WINDOW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ENTRY_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PLAYERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<[gameId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyRefund"
  ): TypedContractMethod<[gameId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finalizeGame"
  ): TypedContractMethod<
    [gameId: string, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, boolean, bigint, boolean] & {
        gameId: string;
        balance: bigint;
        started: boolean;
        startTime: bigint;
        finalized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGameInfo"
  ): TypedContractMethod<
    [gameId: string],
    [
      [string[], bigint, boolean, bigint, boolean, string[]] & {
        players: string[];
        balance: bigint;
        started: boolean;
        startTime: bigint;
        finalized: boolean;
        winners: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isPlayerInGame"
  ): TypedContractMethod<
    [gameId: string, player: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<[gameId: string], [void], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerGameCounts"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startGame"
  ): TypedContractMethod<[gameId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "EmergencyRefund"
  ): TypedContractEvent<
    EmergencyRefundEvent.InputTuple,
    EmergencyRefundEvent.OutputTuple,
    EmergencyRefundEvent.OutputObject
  >;
  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GameFinalized"
  ): TypedContractEvent<
    GameFinalizedEvent.InputTuple,
    GameFinalizedEvent.OutputTuple,
    GameFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;

  filters: {
    "EmergencyRefund(string,address,uint256)": TypedContractEvent<
      EmergencyRefundEvent.InputTuple,
      EmergencyRefundEvent.OutputTuple,
      EmergencyRefundEvent.OutputObject
    >;
    EmergencyRefund: TypedContractEvent<
      EmergencyRefundEvent.InputTuple,
      EmergencyRefundEvent.OutputTuple,
      EmergencyRefundEvent.OutputObject
    >;

    "GameCreated(string,address)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "GameFinalized(string,address[],uint256)": TypedContractEvent<
      GameFinalizedEvent.InputTuple,
      GameFinalizedEvent.OutputTuple,
      GameFinalizedEvent.OutputObject
    >;
    GameFinalized: TypedContractEvent<
      GameFinalizedEvent.InputTuple,
      GameFinalizedEvent.OutputTuple,
      GameFinalizedEvent.OutputObject
    >;

    "GameStarted(string,uint256)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlayerJoined(string,address,uint256)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
  };
}
